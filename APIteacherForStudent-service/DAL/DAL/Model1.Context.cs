//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TeacherForStudentEntities : DbContext
    {
        public TeacherForStudentEntities()
            : base("name=TeacherForStudentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<answerOpinion> answerOpinions { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClassToSchool> ClassToSchools { get; set; }
        public virtual DbSet<CommentsAnswer> CommentsAnswers { get; set; }
        public virtual DbSet<CommentsQuestion> CommentsQuestions { get; set; }
        public virtual DbSet<Proffestion> Proffestions { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<Secretary> Secretaries { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserToClass> UserToClasses { get; set; }
        public virtual DbSet<ClassesJoinUser> ClassesJoinUsers { get; set; }
        public virtual DbSet<ProffestionJoinTeacher> ProffestionJoinTeachers { get; set; }
    
        public virtual int AddProffestionToTeacher(Nullable<int> pro, Nullable<int> teach)
        {
            var proParameter = pro.HasValue ?
                new ObjectParameter("pro", pro) :
                new ObjectParameter("pro", typeof(int));
    
            var teachParameter = teach.HasValue ?
                new ObjectParameter("teach", teach) :
                new ObjectParameter("teach", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProffestionToTeacher", proParameter, teachParameter);
        }
    
        public virtual ObjectResult<getClassesJoinUser_Result> getClassesJoinUser(Nullable<int> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getClassesJoinUser_Result>("getClassesJoinUser", uIdParameter);
        }
    
        public virtual ObjectResult<getProffestionsJoinTeacher_Result> getProffestionsJoinTeacher(Nullable<int> tId)
        {
            var tIdParameter = tId.HasValue ?
                new ObjectParameter("tId", tId) :
                new ObjectParameter("tId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getProffestionsJoinTeacher_Result>("getProffestionsJoinTeacher", tIdParameter);
        }
    
        public virtual ObjectResult<GetStudentProffestionsLevelByTeacher_Result> GetStudentProffestionsLevelByTeacher(Nullable<int> student, Nullable<int> teacher, Nullable<int> @class)
        {
            var studentParameter = student.HasValue ?
                new ObjectParameter("student", student) :
                new ObjectParameter("student", typeof(int));
    
            var teacherParameter = teacher.HasValue ?
                new ObjectParameter("teacher", teacher) :
                new ObjectParameter("teacher", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentProffestionsLevelByTeacher_Result>("GetStudentProffestionsLevelByTeacher", studentParameter, teacherParameter, classParameter);
        }
    
        public virtual ObjectResult<GetStudentsJoinClassToSet_Result> GetStudentsJoinClassToSet(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentsJoinClassToSet_Result>("GetStudentsJoinClassToSet", schoolIdParameter);
        }
    
        public virtual ObjectResult<GetTeachersJoinClassesToSet_Result> GetTeachersJoinClassesToSet(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeachersJoinClassesToSet_Result>("GetTeachersJoinClassesToSet", schoolIdParameter);
        }
    
        public virtual int RemoveProffestionToTeacher(Nullable<int> pro, Nullable<int> teach)
        {
            var proParameter = pro.HasValue ?
                new ObjectParameter("pro", pro) :
                new ObjectParameter("pro", typeof(int));
    
            var teachParameter = teach.HasValue ?
                new ObjectParameter("teach", teach) :
                new ObjectParameter("teach", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveProffestionToTeacher", proParameter, teachParameter);
        }
    
        public virtual ObjectResult<ScoringPerPro_Result> ScoringPerPro(Nullable<int> month, Nullable<int> year, Nullable<int> sid)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var sidParameter = sid.HasValue ?
                new ObjectParameter("sid", sid) :
                new ObjectParameter("sid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScoringPerPro_Result>("ScoringPerPro", monthParameter, yearParameter, sidParameter);
        }
    
        public virtual ObjectResult<SortByStudentProffestions_Result> SortByStudentProffestions(Nullable<int> sId, Nullable<int> index)
        {
            var sIdParameter = sId.HasValue ?
                new ObjectParameter("sId", sId) :
                new ObjectParameter("sId", typeof(int));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("index", index) :
                new ObjectParameter("index", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortByStudentProffestions_Result>("SortByStudentProffestions", sIdParameter, indexParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<teacherJoinSchools_Result> teacherJoinSchools(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<teacherJoinSchools_Result>("teacherJoinSchools", idTeacherParameter);
        }
    }
}
